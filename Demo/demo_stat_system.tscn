[gd_scene load_steps=4 format=3 uid="uid://bmcmn3beekxwd"]

[sub_resource type="CSharpScript" id="CSharpScript_l6e5v"]
script/source = "using Godot;
using System;
using System.Collections.Generic;

namespace StepToStep.Scripts.StatHandler;

public partial class Stats_Handler : Node
{
    private List<Stat> stats = new();

    public override void _Ready()
    {
        foreach(Node variable in GetChildren()){
            try{
                stats.Add(variable as Stat);
            }
            catch(Exception e){
                GD.Print($\"{variable.Name} is not a {typeof(Stat)} Node. Exception {e}\");
            }
        }
    }

    public void Apply(Stat_Data data)
    {
    }
}"

[sub_resource type="CSharpScript" id="CSharpScript_405uv"]
script/source = "using Godot;

namespace StepToStep.Scripts.StatHandler;

[GlobalClass]
public partial class Stat : Node
{
    [Export] public float Value { get; protected set; }

    internal virtual void AddValue(float value)
    {
        Value += value;
    }
}"

[sub_resource type="CSharpScript" id="CSharpScript_qceis"]
script/source = "using Godot;

namespace StepToStep.Scripts.StatHandler;

[GlobalClass]
public partial class Attribute : Stat
{
    [Export] private float maxValue;
    public float MaxValue
    {
        get => maxValue;
        internal set => maxValue += value;
    }

    internal override void AddValue(float value)
    {
        Value = Mathf.Min(Value + value, maxValue);
    }
}"

[node name="demo_stat_system" type="Node"]
script = SubResource("CSharpScript_l6e5v")

[node name="Damage" type="Node" parent="."]
script = SubResource("CSharpScript_405uv")
Value = null

[node name="Health" type="Node" parent="."]
script = SubResource("CSharpScript_qceis")
maxValue = null
Value = null
